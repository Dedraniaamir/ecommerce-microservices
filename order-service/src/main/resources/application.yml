# Order Service Configuration
server:
  port: 8083

spring:
  application:
    name: order-service

  profiles:
    active: dev

  # Database Configuration
  datasource:
    url: jdbc:h2:mem:orderdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  # H2 Console
  h2:
    console:
      enabled: true
      path: /h2-console

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
    defer-datasource-initialization: true

  # Enable SQL script execution
  sql:
    init:
      mode: always

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true

  instance:
    hostname: localhost
    prefer-ip-address: false
    metadata-map:
      version: 1.0.0
      description: Order processing microservice

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException
      product-service:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10

  retry:
    instances:
      user-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.ResourceAccessException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException
      product-service:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

  timelimiter:
    instances:
      user-service:
        timeoutDuration: 5s
        cancelRunningFuture: true
      product-service:
        timeoutDuration: 5s
        cancelRunningFuture: true

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,retries
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

# Application Information
info:
  app:
    name: Order Service
    description: Order processing and management microservice
    version: 1.0.0
    features:
      - Order creation and management
      - Inter-service communication
      - Async processing
      - Transactional operations
      - Circuit breakers and resilience

# Logging Configuration
logging:
  level:
    com.ecommerce.order: DEBUG
    org.springframework.web: INFO
    org.springframework.transaction: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    io.github.resilience4j: DEBUG

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] [traceId=%X{traceId}] - %msg%n"

# Custom application properties
order:
  processing:
    async-enabled: true
    notification-enabled: true
    analytics-enabled: true

  payment:
    timeout: 30000  # 30 seconds
    retry-attempts: 3

  inventory:
    reserve-timeout: 10000  # 10 seconds
    release-on-failure: true

  shipping:
    free-shipping-threshold: 100.00
    default-shipping-cost: 9.99

  tax:
    default-rate: 0.085  # 8.5%

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    root: INFO

order:
  processing:
    async-enabled: true

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: jdbc:postgresql://localhost:5432/orderdb
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME:order_user}
    password: ${DB_PASSWORD:password}

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    root: WARN
    com.ecommerce.order: INFO

order:
  processing:
    async-enabled: true
    notification-enabled: true
    analytics-enabled: true

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false

order:
  processing:
    async-enabled: false  # Disable async for tests
    notification-enabled: false
    analytics-enabled: false

logging:
  level:
    com.ecommerce.order: WARN